# Deploy to Azure Kubernetes Service
# Build and push image to Azure Container Registry; Deploy to Azure Kubernetes Service
# https://docs.microsoft.com/azure/devops/pipelines/languages/docker

trigger:
  branches:
    include:
      - master
      - develop
      - features/*
  paths:
    include:
      - api/*
      - app/*
      - core/*
      - integration/*
      - pom.xml

resources:
- repo: self

variables:

  # Container registry service connection established during pipeline creation
  dockerRegistryServiceConnection: '1b7900a3-6e8a-403a-b6ce-349854a5c6b8'
  imageRepository: 'bpdmscitizen'
  containerRegistry: 'cstarregistry.azurecr.io'
  dockerfileRelativePath: 'Dockerfile'
  tag: '$(Build.BuildId)'
  imagePullSecret: 'cstarregistry92872b72-auth'

  # Agent VM image name
  vmImageName: 'ubuntu-latest'
  

stages:
- stage: Build
  displayName: Build stage
  jobs:  
  - job: Build
    displayName: Build
    pool:
      vmImage: $(vmImageName)
    steps:
    - task: DownloadSecureFile@1
      displayName: 'download settings.xml for Maven'
      name: settingsxml
      inputs:
        secureFile: 'settings.xml'
        retryCount: '2'
    - task: Maven@3
      inputs:
        mavenPomFile: 'pom.xml'
        goals: 'package'
        options: '-B -s $(settingsxml.secureFilePath) -Dmaven.test.skip=true'
        javaHomeOption: 'JDKVersion'
        jdkVersionOption: '1.8'
        mavenVersionOption: 'Default'
        mavenOptions: '-Xmx3072m'
        mavenAuthenticateFeed: false
        effectivePomSkip: true
        sonarQubeRunAnalysis: false
    - task: PublishPipelineArtifact@1
      inputs:
        targetPath: '$(Build.Repository.LocalPath)/target'
        artifact: 'target'
        publishLocation: 'pipeline'
    - task: PublishPipelineArtifact@1
      inputs:
        targetPath: '$(Build.Repository.LocalPath)/$(dockerfileRelativePath)'
        artifact: 'dockerfile'
        publishLocation: 'pipeline'
    - task: PublishPipelineArtifact@1
      inputs:
        targetPath: '$(Build.Repository.LocalPath)/manifests'
        artifact: 'manifests'
        publishLocation: 'pipeline'

- stage: Deploy
  displayName: Deploy stage
  dependsOn: Build
  condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest'))

  jobs:
  - deployment: Deploy
    displayName: Deploy
    pool:
      vmImage: $(vmImageName)
    environment: 'pagopa-bpd-ms-citizen-dev.bpd-dev'
    strategy:
      runOnce:
        deploy:
          steps:
          - task: Docker@2
            displayName: Build and push an image to container registry
            inputs:
              containerRegistry: '$(dockerRegistryServiceConnection)'
              repository: '$(imageRepository)'
              command: 'buildAndPush'
              Dockerfile: '$(Pipeline.Workspace)/$(dockerfileRelativePath)'
              tags: '$(tag)'
          - task: KubernetesManifest@0
            displayName: Create imagePullSecret
            inputs:
              action: createSecret
              secretName: $(imagePullSecret)
              dockerRegistryEndpoint: $(dockerRegistryServiceConnection)
          - task: KubernetesManifest@0
            displayName: Deploy to Kubernetes cluster
            inputs:
              action: deploy
              manifests: |
                $(Pipeline.Workspace)/manifests/deployment.yml
                $(Pipeline.Workspace)/manifests/service.yml
              imagePullSecrets: |
                $(imagePullSecret)
              containers: |
                $(containerRegistry)/$(imageRepository):$(tag)

